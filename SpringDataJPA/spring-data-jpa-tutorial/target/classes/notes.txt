//JPQL
@Query("select s from Student s where s.emailId=?1")
Student getStudentByEmailAddress(String emailId);

//NativeQuery
@Query(value="select * from tbl_student s where s.email_address=?1",
nativeQuery=true)
Student getStudentByEmailAddressNative(String emailId);

//Query Named Params
@Query(value="select * from tbl_student s where s.email_address=:emailId",
nativeQuery=true)
Student getStudentByEmailAddressNative(@Param("emailId") String emailId);

//@Transactional and @Modifying Annotations

@Modifying - used when any records in the Database gets modified
@Transactional - mostly used in service layer to ensure secure and consistent transactions
happens and also commits the txn after the method execution completes
@Query(value="update tbl_student s set s.first_name=?1 where s.email_address=?2",
nativeQuery=true)
Student updateStudenFirstNameByEmailId(String firstName, String emailId);

@OneToOne(cascade=cascadeType.ALL, fetch=fetchType.LAZY)
@JoinColumn(name="course_id",referencedColumnName="courseId")

@OneToOne(mappedBy="course") //Bidirectional

@oneToMany(cascade=cascadeType.ALL)
@JoinColumn(name="teacher_id",referencedColumnName="teacherId")
private Course course;

@ManyToOne(cascade=cascadeType.ALL)
@JoinColumn(name="teacher_id",referencedColumnName="teacherId")
private Teacher teacher;

@ManyToMany(cascade=CascadeType.ALL)
	@JoinTable(name="course_student_map",
	joinColumns = @JoinColumn(name="course_id",referencedColumnName = "courseId"),
	inverseJoinColumns = @JoinColumn(name="student_id",referencedColumnName = "studentId"))
	private List<Student> student;